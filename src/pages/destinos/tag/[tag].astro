---
import Layout from '../../../layouts/Layout.astro';
import Header from '../../../components/layout/Header.astro';
import Footer from '../../../components/layout/Footer.astro';
import DestinationCard from '../../../components/destinations/DestinationCard.astro';
import SelectFilter from '../../../components/common/SelectFilter.astro';
import { Icon } from 'astro-icon/components';
import { getCollection } from 'astro:content';
import { hasTag } from '../../../utils/content';

// Definir tipos para los rangos de presupuesto y duración
type BudgetKey = 'budget-1' | 'budget-2' | 'budget-3' | 'budget-4' | 'budget-5';
type DurationKey = 'duration-1' | 'duration-2' | 'duration-3' | 'duration-4' | 'duration-5';

// IMPORTANTE: Esta configuración permite la construcción de rutas dinámicas
export const prerender = false;

// Esta función se ha simplificado para evitar errores en la generación de rutas estáticas
export async function getStaticPaths() {
  const allDestinations = await getCollection('destinations');
  
  // Recopilamos todos los tags posibles
  const tagSet = new Set<string>();
  
  // Recopilar tags principales
  allDestinations.forEach(dest => {
    if (dest.data.tag) {
      tagSet.add(dest.data.tag.toLowerCase());
    }
  });
  
  // Recopilar tags adicionales
  allDestinations.forEach(dest => {
    if (Array.isArray(dest.data.tags)) {
      dest.data.tags.forEach(tag => {
        if (tag) tagSet.add(tag.toLowerCase());
      });
    }
  });
  
  // Añadir manualmente los tags importantes para asegurar su existencia
  const importantTags = ['aventura', 'playa', 'cultural', 'romantico', 'romántico', 'oferta', 'todo incluido'];
  importantTags.forEach(tag => tagSet.add(tag));
  
  // Convertir a array y generar paths
  const allTags = Array.from(tagSet);
  
  return allTags.map(tag => {
    // Filtrar destinos por este tag (insensible a mayúsculas/minúsculas)
    const tagDestinations = allDestinations.filter(dest => {
      // Verificar tag principal
      const mainTagMatch = dest.data.tag && 
        dest.data.tag.toLowerCase() === tag.toLowerCase();
      
      // Verificar tags adicionales
      const additionalTagMatch = Array.isArray(dest.data.tags) && 
        dest.data.tags.some(t => t && t.toLowerCase() === tag.toLowerCase());
      
      return mainTagMatch || additionalTagMatch;
    });
    
    // Preparar destinos para la renderización
    const destinations = tagDestinations.map(entry => ({
      ...entry.data,
      slug: entry.slug
    }));
    
    return {
      params: { tag },
      props: { tag, destinations }
    };
  });
}

// Obtener parámetros y props
const { tag } = Astro.params;
const { destinations } = Astro.props;

// Asegurarnos de que destinations siempre sea un array
const safeDestinations = destinations || [];

// Formatear el tag para mostrarlo (primera letra mayúscula)
// Se utiliza type assertion para asegurar que TypeScript sepa que tag es un string
const formattedTag = tag ? 
  ((tag as string).charAt(0).toUpperCase() + (tag as string).slice(1)).replace('-', ' ') : 
  '';

// Título y descripción de la página según el tag
const pageTitle = `Destinos de ${formattedTag}`;
let pageDescription = '';

// Se utiliza type assertion para evitar error con toLowerCase()
const tagLower = tag ? (tag as string).toLowerCase() : '';

switch(tagLower) {
  case 'aventura':
    pageDescription = 'Descubre destinos increíbles llenos de adrenalina y aventuras al aire libre.';
    break;
  case 'playa':
    pageDescription = 'Relájate en las playas más hermosas con arena blanca y aguas cristalinas.';
    break;
  case 'cultural':
    pageDescription = 'Explora destinos con rica historia, patrimonio cultural y experiencias auténticas.';
    break;
  case 'oferta':
    pageDescription = 'Encuentra las mejores ofertas en destinos increíbles a precios especiales.';
    break;
  case 'romantico':
  case 'romántico':
    pageDescription = 'Escápate con tu pareja a los destinos más románticos y crea recuerdos inolvidables.';
    break;
  case 'todo-incluido':
  case 'todo incluido':
    pageDescription = 'Disfruta de vacaciones sin preocupaciones con paquetes que incluyen todo lo que necesitas.';
    break;
  default:
    pageDescription = 'Descubre destinos increíbles seleccionados especialmente para ti.';
}

// Regiones para filtros
const regions = [
  { id: "all", label: "Todas las regiones" },
  { id: "caribe", label: "Caribe" },
  { id: "andina", label: "Andina" },
  { id: "norteamerica", label: "Norteamérica" },
  { id: "sudamerica", label: "Sudamérica" },
  { id: "europa", label: "Europa" },
  { id: "asia", label: "Asia" }
];

// Presupuesto
const budgetRanges = [
  { id: "budget-1", label: "Hasta $1,000,000" },
  { id: "budget-2", label: "$1,000,000 - $3,000,000" },
  { id: "budget-3", label: "$3,000,000 - $5,000,000" },
  { id: "budget-4", label: "$5,000,000 - $10,000,000" },
  { id: "budget-5", label: "Más de $10,000,000" }
];

// Duraciones del viaje
const tripDurations = [
  { id: "duration-1", label: "3-5 días" },
  { id: "duration-2", label: "6-8 días" },
  { id: "duration-3", label: "9-12 días" },
  { id: "duration-4", label: "13-15 días" },
  { id: "duration-5", label: "Más de 15 días" }
];

// Obtener parámetros de filtro de la URL
const { searchParams } = Astro.url;
const selectedRegion = searchParams.get('region') || '';
const selectedBudget = searchParams.get('budget') || '';
const selectedDuration = searchParams.get('duration') || '';
const travel_date = searchParams.get('travel_date') || '';

// Aplicar filtros adicionales si están presentes
let filteredDestinations = safeDestinations;

// Filtrar por región
if (selectedRegion && selectedRegion !== 'all') {
  filteredDestinations = filteredDestinations.filter(dest => dest.region === selectedRegion);
}

// Definir mapas de rangos con tipos específicos
const budgetRangeMap: Record<BudgetKey, {min: number, max: number}> = {
  'budget-1': { min: 0, max: 1000000 },
  'budget-2': { min: 1000000, max: 3000000 },
  'budget-3': { min: 3000000, max: 5000000 },
  'budget-4': { min: 5000000, max: 10000000 },
  'budget-5': { min: 10000000, max: Infinity }
};

// Filtrar por presupuesto usando comprobación segura de tipos
if (selectedBudget && Object.keys(budgetRangeMap).includes(selectedBudget)) {
  const range = budgetRangeMap[selectedBudget as BudgetKey];
  filteredDestinations = filteredDestinations.filter(dest => 
    dest.price >= range.min && dest.price <= range.max
  );
}

// Definir rangos de duración con tipos específicos
const durationRangeMap: Record<DurationKey, {min: number, max: number}> = {
  'duration-1': { min: 3, max: 5 },
  'duration-2': { min: 6, max: 8 },
  'duration-3': { min: 9, max: 12 },
  'duration-4': { min: 13, max: 15 },
  'duration-5': { min: 16, max: Infinity }
};

// Filtrar por duración usando comprobación segura de tipos
if (selectedDuration && Object.keys(durationRangeMap).includes(selectedDuration)) {
  const range = durationRangeMap[selectedDuration as DurationKey];
  filteredDestinations = filteredDestinations.filter(dest => 
    dest.duration >= range.min && dest.duration <= range.max
  );
}

// Determinar el color de fondo y tema según el tag
let heroGradient = 'from-blue-600 to-blue-800';
let buttonColor = 'bg-blue-600 hover:bg-blue-700';

// Usar tagLower que ya hemos definido antes
switch(tagLower) {
  case 'aventura':
    heroGradient = 'from-green-600 to-green-800';
    buttonColor = 'bg-green-600 hover:bg-green-700';
    break;
  case 'playa':
    heroGradient = 'from-cyan-500 to-blue-500';
    buttonColor = 'bg-cyan-600 hover:bg-cyan-700';
    break;
  case 'cultural':
    heroGradient = 'from-purple-600 to-purple-800';
    buttonColor = 'bg-purple-600 hover:bg-purple-700';
    break;
  case 'romantico':
  case 'romántico':
    heroGradient = 'from-pink-600 to-pink-800';
    buttonColor = 'bg-pink-600 hover:bg-pink-700';
    break;
  case 'oferta':
    heroGradient = 'from-red-600 to-red-800';
    buttonColor = 'bg-red-600 hover:bg-red-700';
    break;
  case 'todo-incluido':
  case 'todo incluido':
    heroGradient = 'from-yellow-600 to-yellow-800';
    buttonColor = 'bg-yellow-600 hover:bg-yellow-700';
    break;
}
---

<Layout title={`${pageTitle} | AL mundo Tour`} description={pageDescription}>
  <Header />
  
  <main>
    <!-- Hero section -->
    <section class={`bg-gradient-to-r ${heroGradient} py-20 pt-32`}>
      <div class="container mx-auto px-4 text-center">
        <h1 class="text-4xl md:text-5xl font-bold text-white mb-4">{pageTitle}</h1>
        <p class="text-xl text-white/90 max-w-3xl mx-auto">
          {pageDescription}
        </p>
      </div>
    </section>
    
    <!-- Breadcrumbs -->
    <section class="bg-gray-50 py-4 border-b border-gray-200">
      <div class="container mx-auto px-4">
        <div class="flex items-center text-sm text-gray-500">
          <a href="/" class="hover:text-blue-600">Inicio</a>
          <span class="mx-2">➡️</span>
          <a href="/destinos" class="hover:text-blue-600">Destinos</a>
          <span class="mx-2">➡️</span>
          <span class="text-gray-700">Destinos {formattedTag}</span>
        </div>
      </div>
    </section>
    
    <!-- Filtros horizontales -->
    <section class="py-8 bg-gray-50">
      <div class="container mx-auto px-4">
        <div class="bg-white rounded-lg shadow-md p-6">
          <h2 class="text-xl font-bold text-gray-900 mb-4">Filtrar destinos de {formattedTag}</h2>
          
          <form id="filter-form" method="get" class="grid grid-cols-1 md:grid-cols-4 gap-6">
            <!-- Región -->
            <SelectFilter
              name="region"
              label="Región"
              options={regions}
              placeholder="Todas las regiones"
              selectedValue={selectedRegion}
            />
            
            <!-- Presupuesto -->
            <SelectFilter
              name="budget"
              label="Presupuesto"
              options={budgetRanges}
              placeholder="Cualquier presupuesto"
              selectedValue={selectedBudget}
            />
            
            <!-- Duración -->
            <SelectFilter
              name="duration"
              label="Duración"
              options={tripDurations}
              placeholder="Cualquier duración"
              selectedValue={selectedDuration}
            />
            
            <!-- Botones de acción -->
            <div class="flex items-end gap-3">
              <button
                type="submit"
                class={`flex-grow ${buttonColor} text-white py-2 px-3 rounded-md font-medium transition-colors flex items-center justify-center`}
              >
                <Icon name="tabler:filter" class="w-5 h-5 mr-2" />
                Aplicar filtros
              </button>
              
              <a 
                href={`/destinos/tag/${tag}`}
                class="bg-gray-100 text-gray-700 py-2 px-3 rounded-md font-medium hover:bg-gray-200 transition-colors flex items-center justify-center"
              >
                <Icon name="tabler:refresh" class="w-5 h-5 mr-2" />
                Limpiar
              </a>
            </div>
          </form>
        </div>
      </div>
    </section>
    
    <!-- Listado de destinos -->
    <section class="py-12">
      <div class="container mx-auto px-4">
        <h2 class="text-2xl font-bold text-gray-900 mb-8">
          {selectedRegion || selectedBudget || selectedDuration 
            ? `Resultados filtrados: Destinos de ${formattedTag}` 
            : `Todos los destinos de ${formattedTag}`}
        </h2>
        
        {filteredDestinations.length > 0 ? (
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {filteredDestinations.map((destination) => (
              <DestinationCard destination={destination} />
            ))}
          </div>
        ) : (
          <div class="bg-white rounded-lg shadow-lg p-8 text-center">
            <div class="text-6xl mb-4">🔍</div>
            <h2 class="text-2xl font-bold text-gray-900 mb-4">No encontramos destinos en esta categoría</h2>
            <p class="text-lg text-gray-600 mb-6">Prueba otra categoría o contacta con nuestros asesores para encontrar el destino perfecto para ti.</p>
            
            <div class="flex flex-col sm:flex-row gap-4 justify-center">
              <a href="/destinos" class={`${buttonColor} text-white py-3 px-6 rounded-md font-medium transition-colors inline-flex items-center justify-center`}>
                <span class="mr-2">🔄</span>
                Ver todos los destinos
              </a>
              
              <a href="/contacto" class="bg-green-500 text-white py-3 px-6 rounded-md font-medium hover:bg-green-600 transition-colors inline-flex items-center justify-center">
                <span class="mr-2">💬</span>
                Contactar asesor
              </a>
            </div>
          </div>
        )}
      </div>
    </section>
    
    <!-- CTA - Asesoramiento personalizado -->
    <section class="py-16 bg-gray-50">
      <div class="container mx-auto px-4 text-center">
        <h2 class="text-3xl font-bold mb-4">¿No encuentras lo que buscas?</h2>
        <p class="text-xl text-gray-600 mb-8 max-w-3xl mx-auto">
          Nuestros asesores de viaje están para ayudarte a encontrar el destino perfecto según tus preferencias y presupuesto.
        </p>
        
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a 
            href="/contacto" 
            class={`${buttonColor} text-white py-3 px-8 rounded-md font-medium transition-colors`}
          >
            Solicitar asesoramiento gratuito
          </a>
          
          <a 
            href={`https://wa.me/573165276338?text=Hola, estoy buscando un destino de tipo ${formattedTag}`}
            target="_blank" 
            class="bg-green-500 text-white py-3 px-8 rounded-md font-medium hover:bg-green-600 transition-colors"
          >
            Contactar por WhatsApp
          </a>
        </div>
      </div>
    </section>
  </main>
  
  <Footer />
</Layout>